// Generated by CoffeeScript 1.6.3
var Api, Auth, Client, http, https, _;

_ = require('underscore');

http = require('http');

https = require('https');

Api = require('./api');

Auth = require('./auth');

Client = (function() {
  Client.prototype.defaults = {
    client_id: null,
    client_secret: null,
    host: 'gocoin-api.herokuapp.com',
    port: null,
    path: '/api',
    api_version: 'v1',
    secure: true,
    method: 'GET'
  };

  Client.prototype.default_headers = {
    'Content-Type': 'application/json'
  };

  function Client(options) {
    var self;
    if (options == null) {
      options = {};
    }
    console.log("Client::constructor called.");
    this.options = _.defaults(options, this.defaults);
    this.headers = options.headers != null ? options.headers : _.defaults({}, this.default_headers);
    console.log("Using options: " + this.options);
    this.auth = new Auth(this);
    self = this;
    this.authenticate(options, function(response) {
      var response_data;
      response_data = '';
      response.on('data', function(chunk) {
        return response_data += chunk;
      });
      return response.on('end', function() {
        self.token = JSON.parse(response_data).access_token;
        return console.log(self.token);
      });
    });
    this.api = new Api(this);
    this.user = this.api.user;
    this.merchant = this.api.merchant;
  }

  Client.prototype.test = function() {
    return this.user.self(function(response) {
      var response_data;
      response_data = '';
      response.on('data', function(chunk) {
        return response_data += chunk;
      });
      return response.on('end', function() {
        var me;
        me = JSON.parse(response_data).access_token;
        return console.log(me);
      });
    });
  };

  Client.prototype.authenticate = function(options, callback) {
    console.log("Client::authenticate called.");
    return this.auth.authenticate(options, callback);
  };

  Client.prototype.request_client = function(secure) {
    if (secure == null) {
      secure = true;
    }
    if (secure) {
      return https;
    } else {
      return http;
    }
  };

  Client.prototype.port = function(secure) {
    if (secure == null) {
      secure = true;
    }
    if (this.options.port != null) {
      return this.options.port;
    } else if (secure) {
      return 443;
    } else {
      return 80;
    }
  };

  Client.prototype.config = function(which) {
    if (this.options[which] != null) {
      console.log(this.options[which]);
      return this.options[which];
    } else {
      return null;
    }
  };

  Client.prototype.raw_request = function(config, callback) {
    var request;
    console.log("Raw request logged.");
    if (config.body) {
      config.headers['Content-Length'] = config.body.length;
    }
    console.log("Making request with config: ", config);
    request = this.request_client().request(config, callback);
    request.on('error', function(err) {
      return callback(err);
    });
    if (config.body) {
      request.write(config.body);
    }
    return request.end;
  };

  return Client;

})();

module.exports = Client;
